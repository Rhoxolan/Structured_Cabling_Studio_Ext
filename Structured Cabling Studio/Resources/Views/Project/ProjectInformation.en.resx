<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Author of project" xml:space="preserve">
    <value>Author of project</value>
  </data>
  <data name="E-Mail" xml:space="preserve">
    <value>E-Mail</value>
  </data>
  <data name="Eight paragraph &amp; link to the SCS-Calc 2.0 repo" xml:space="preserve">
    <value>The release of the SCS-Calc application 2.0 took place in February 2023. Additionally, the application has become the subject of a coursework on the .NET platform at the STEP IT Academy in Kryvyi Rih.&lt;br/&gt;
You can find more detailed information about the application on GitHub</value>
  </data>
  <data name="Fifth paragraph - link to the SCS-Calc 1.1 repo" xml:space="preserve">
    <value>The source code of the SCS-Calc 1.1 is available on GitHub</value>
  </data>
  <data name="First paragraph" xml:space="preserve">
    <value>In August 2021, while working on the coursework on the "Structured cabling" subject at the STEP IT Academy in Kryvyi Rih, there was a need to develop software for calculation of necessary cable meterage for building of a structured cabling. The first version of the application was created - the console application on C++, which was named SCS-Calc.</value>
  </data>
  <data name="First&amp;second image description" xml:space="preserve">
    <value>The first console version of the SCS-Calc application</value>
  </data>
  <data name="Fourth paragraph" xml:space="preserve">
    <value>The project continued to evolve. In August 2022, work on the version 1.1 was began. One of the main development directions was the creation of an additional parameters menu, where users could customize calculation settings.&lt;br/&gt;
During the development of version 1.1, work on the new architectural concept of the project was began. To be able to port the application to other development platforms, work has begun on the creation of the cross-platform library that is independent of the type of application and contains the application logic model. This played a significant role in the next versions of the project, allowing the logical core of the application to be ported to other platforms.</value>
  </data>
  <data name="Fourth&amp;fifth image description" xml:space="preserve">
    <value>SCS-Calc 1.1</value>
  </data>
  <data name="History of project" xml:space="preserve">
    <value>The history of project</value>
  </data>
  <data name="Img." xml:space="preserve">
    <value>Img.</value>
  </data>
  <data name="Ninth paragraph - link to the Structured Cabling Studio repo" xml:space="preserve">
    <value>After the release of SCS-Calc 2.0, as a conceptual continuation of the project, the idea of developing a web application emerged. In March 2023, work on the Structured Cabling Studio project was began on the .NET 7 ASP.NET Core platform.&lt;br/&gt;
The release took place in May 2023. Inheriting the concept from the desktop versions of the project, Structured Cabling Studio provides extensive functionality for calculating necessary cable meterage for building of a structured cabling and obtaining cable selection recommendations.&lt;br/&gt;
You can explore the source code of the Structured Cabling Studio project on GitHub</value>
  </data>
  <data name="Profile" xml:space="preserve">
    <value>Profile</value>
  </data>
  <data name="Project Information page title" xml:space="preserve">
    <value>Project Information</value>
  </data>
  <data name="Second paragraph" xml:space="preserve">
    <value>However, already at that time, there was an understanding that the first priority was to create a application with a graphical user interface.&lt;br/&gt;
This was accomplished in June 2022 - the first version of the application with a graphical user interface was developed on the .NET 6 Windows Forms platform using the C# language. The application was got 1.0 release index.</value>
  </data>
  <data name="Seventh paragraph" xml:space="preserve">
    <value>The SCS-Calc 2.0 application became completely new, modern, and feature-rich. The application was developed using a more modern development platform - .NET 7 WPF. The functionality of the application was significantly improved, and the ability to receive cable selection recommendations was added. The transition to the new platform enabled the implementation of a completely new, revolutionary design.</value>
  </data>
  <data name="Sixth image description" xml:space="preserve">
    <value>SCS-Calc 2.0</value>
  </data>
  <data name="Sixth paragraph" xml:space="preserve">
    <value>But version 1.1 was never released, as the work on version 1.1 seamlessly transitioned into the development of version 2.0.</value>
  </data>
  <data name="Third image description" xml:space="preserve">
    <value>The SCS-Calc application - the desktop version</value>
  </data>
  <data name="Third paragraph - link to the SCS-Calc repo" xml:space="preserve">
    <value>You can explore the SCS-Calc application in more detail on GitHub</value>
  </data>
</root>