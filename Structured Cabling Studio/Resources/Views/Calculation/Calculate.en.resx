<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add cable selection recommendations" xml:space="preserve">
    <value>Add cable selection recommendations</value>
  </data>
  <data name="Advanced calculation parameters" xml:space="preserve">
    <value>Advanced calculation parameters</value>
  </data>
  <data name="Arbitary ports count per workplace" xml:space="preserve">
    <value>Allow an arbitrary ports count per 1 workplace</value>
  </data>
  <data name="Availability of technological reserve coefficient:" xml:space="preserve">
    <value>Take into account of the technological reserve coefficient:</value>
  </data>
  <data name="AveragePermanentLink" xml:space="preserve">
    <value>Average length of the permanent link:</value>
  </data>
  <data name="CableHankMeterage" xml:space="preserve">
    <value>Cable length on 1 hank:</value>
  </data>
  <data name="CableQuantity" xml:space="preserve">
    <value>Necessary cable meterage:</value>
  </data>
  <data name="CableSelectionRecommendations" xml:space="preserve">
    <value>Cable selection recommendations:</value>
  </data>
  <data name="Calculate" xml:space="preserve">
    <value>Calculate</value>
  </data>
  <data name="Calculation page title" xml:space="preserve">
    <value>Calculation</value>
  </data>
  <data name="Clean output block" xml:space="preserve">
    <value>Clean output block</value>
  </data>
  <data name="Consider standard fire safety requirements" xml:space="preserve">
    <value>Consider the standard fire safety requirements</value>
  </data>
  <data name="Hank length" xml:space="preserve">
    <value>Length</value>
  </data>
  <data name="HankQuantity" xml:space="preserve">
    <value>Necessary cable hank count:</value>
  </data>
  <data name="Insulation Material" xml:space="preserve">
    <value>Recommended cable insluation material:</value>
  </data>
  <data name="Insulation Type" xml:space="preserve">
    <value>Recommended cable insluation type:</value>
  </data>
  <data name="m" xml:space="preserve">
    <value>m</value>
  </data>
  <data name="Maximum length of the permanent link:" xml:space="preserve">
    <value>Maximum length of the permanent link:</value>
  </data>
  <data name="MaxPermanentLink" xml:space="preserve">
    <value>Maximum length of the permanent link:</value>
  </data>
  <data name="Minimum length of the permanent link:" xml:space="preserve">
    <value>Minimum length of the permanent link:</value>
  </data>
  <data name="MinPermanentLink" xml:space="preserve">
    <value>Minimum length of the permanent link:</value>
  </data>
  <data name="NumberOfPorts" xml:space="preserve">
    <value>Ports count per 1 workplace:</value>
  </data>
  <data name="NumberOfWorkplaces" xml:space="preserve">
    <value>Workplaces count:</value>
  </data>
  <data name="Ports count per 1 workplace:" xml:space="preserve">
    <value>Ports count per 1 workplace:</value>
  </data>
  <data name="RecordTime" xml:space="preserve">
    <value>Date and time of structured cabling confiruration record:</value>
  </data>
  <data name="Restore defaults" xml:space="preserve">
    <value>Restore defaults</value>
  </data>
  <data name="Save to TXT" xml:space="preserve">
    <value>Save to TXT</value>
  </data>
  <data name="Shielding" xml:space="preserve">
    <value>Recommended cable shielding type:</value>
  </data>
  <data name="Standart" xml:space="preserve">
    <value>Recommended cable category:</value>
  </data>
  <data name="Standart values" xml:space="preserve">
    <value>Standart values</value>
  </data>
  <data name="Strict compliance with the standart" xml:space="preserve">
    <value>Strict compliance with the ISO/IEC 11801 standart</value>
  </data>
  <data name="Take into account the cable hank meterage" xml:space="preserve">
    <value>Take into account the cable hank meterage</value>
  </data>
  <data name="Take into account the necessity of cable shielding" xml:space="preserve">
    <value>Take into account the necessity of cable shielding</value>
  </data>
  <data name="The standard values of a cable hank length" xml:space="preserve">
    <value>The standard values of a cable hank length</value>
  </data>
  <data name="TotalCableQuantity" xml:space="preserve">
    <value>Total necessary cable meterage:</value>
  </data>
  <data name="Used connection interfaces" xml:space="preserve">
    <value>Used connection interfaces</value>
  </data>
  <data name="Will the sections of the cable route run outdoors" xml:space="preserve">
    <value>Will the sections of the cable route run outdoors</value>
  </data>
  <data name="Workplaces count:" xml:space="preserve">
    <value>Workplaces count:</value>
  </data>
</root>